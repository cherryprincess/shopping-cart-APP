name: CI Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build_id: ${{ steps.build_tag.outputs.BUILD_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Build project
        run: npm run build
      - name: Build Docker image
        run: docker build -t shopping-cart-app .
      - name: Install Trivy
        run: |
          sudo apt-get update && \
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release && \
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add - && \
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list && \
          sudo apt-get update && \
          sudo apt-get install -y trivy
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: shopping-cart-app
          format: table
          exit-code: 1
          ignore-unfixed: true
          severity: CRITICAL,HIGH
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Set build tag
        id: build_tag
        run: echo "BUILD_ID=$(echo $GITHUB_RUN_NUMBER)" >> $GITHUB_ENV && echo "BUILD_ID=$GITHUB_RUN_NUMBER" >> $GITHUB_OUTPUT
      - name: Tag Docker image
        run: docker tag shopping-cart-app ${{ secrets.ACR_LOGIN_SERVER }}/shopping-cart-app:${{ env.BUILD_ID }}
      - name: Push Docker image to ACR
        run: docker push ${{ secrets.ACR_LOGIN_SERVER }}/shopping-cart-app:${{ env.BUILD_ID }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set AKS context
        uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
      - name: Create namespace if not exists
        run: kubectl create namespace ${{ secrets.AKS_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
      - name: Set image tag in deployment file
        run: |
          sed -i "s|<ACR_LOGIN_SERVER>/shopping-cart-app:BUILD_ID|${{ secrets.ACR_LOGIN_SERVER }}/shopping-cart-app:${{ needs.build.outputs.build_id }}|g" aks-deployment.yaml
      - name: Deploy to AKS
        run: kubectl apply -f aks-deployment.yaml -n ${{ secrets.AKS_NAMESPACE }}
      - name: Verify deployment status
        run: |
          echo "Waiting for deployment to be ready..."
          kubectl rollout status deployment/shopping-cart-app -n ${{ secrets.AKS_NAMESPACE }} --timeout=300s
          echo "Checking pod status..."
          kubectl get pods -n ${{ secrets.AKS_NAMESPACE }} -l app=shopping-cart-app
          echo "Checking service status..."
          kubectl get svc -n ${{ secrets.AKS_NAMESPACE }} shopping-cart-app
